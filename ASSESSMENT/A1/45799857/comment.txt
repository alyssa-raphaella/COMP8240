1. 6 segmentation boundaries were maed by the script for input files. The number of segmentation boundaries, is based on the average WinDiff and Pk score of the two input documents. The script evaluates boundary values of 2 to 10, the boundary with the lowest average scores will be the used as the value of k in the segmentation process.

2. Data from wikipedia were used as input files. The script needs to have two argument search words, "Seoul" and "Nokia" for this example. a1_main.sh runs the a1_wiki.py, which retrieves data of the arguments from wikipedia, and append them to raw_057.ref and raw_157.ref. This files will be then fed to a1_clean.py, which cleans the data, removes the punctuation and numbers, gets the first 300 lines of each raw files.

3. The creation and processing of the composite document was done by the a1_main.sh, which executes the segment and eval script to access the input files and create the composite file. The eval_dup script is a duplicate of eval script, where the it evaluates the composite file. The evaluation of the composite file has better result compared to the indivual input files evaluation. This is due to the arrangement made in the composite file, where the each segments and alternately appended to the composite file. Through this the topics are easier to recognize as different, compared to individual file evaluation. Both input files and composite file, are segmented and evaulated based on choi style boundaries. Stop words were removed/disregarded in segmentation, to be able to evaluate the weights of the remaining words per segmented topic. The MCMC parameters are used in calculating the topic boundaries, Pk, and WinDiff scores. 

4. As expected, composite file gives better scores, with 0.0726 differece in WinDiff, and 0.0467 difference in Pk score. This great difference is expected due to the search inputs are from different categories(Seoul, Nokia : City, Brand). But when words from same categories are used as input search arguments, the individual file scores are better compared to the composite document. Some examples of these are, input arguments "Sydney" and "Melbourne", which are both cities of Australia. This gives WinDiff = 0.1631 Pk = 0.680 for indivual inputs, WinDiff =  0.3724 Pk = 0.3815 for  composite document. Another example is input arguments "Palawan" and "Cebu", which are both provinces in the Philippines, which are known for their beaches. It gives indivual input file evaluation of WinDiff = 0.1856 Pk = 0.1914, and composite document WinDiff = 0.3503 Pk = 0.3627. In conclusion, the composite file gives better result, if the input arguments are from different categories.